Solve following questions:
1.     Write a program that takes a student's score as input and outputs the corresponding grade based on the following scale:
A: 90-100
B: 80-89
C: 70-79
D: 60-69
F: 0-59
INPUT:-
package Grade;
import java.util.Scanner; 

public class Grade {
	public static void main(String[] args) {

		// TODO Auto-generated method stub

		// Create a Scanner object to read input//
		Scanner obj=new Scanner(System.in);

		//getting input from user//
		System.out.println("Enter the Score: ");
		int Score=obj.nextInt();
		char grade;

		//for giving the grade based on the input//
		if(Score>=90 && Score<=100)
		{
			System.out.println("Grade is A");
		}
		else if(Score>=80 && Score<=89)
		{
			System.out.println("Grade is B");
		}
		else if(Score>=70 && Score<=79)
		{
			System.out.println("Grade is C");
		}
		else if(Score>=60 && Score<=69)
		{
			System.out.println("Grade is D");
		}
		else if(Score>=0 && Score<=59)
		{
			System.out.println("Grade is E");
		}
		else {
			System.out.println("please enter the valid number from 0 to 100");
		}

		//scanner close
		obj.close();

	}

}



OUTPUT:-
 


















2.     Write a program to check if a given year is a leap year. (A year is a leap year if it is divisible by 4 but not by 100, or it is divisible by 400.)
INPUT:-
package leapYear;
import java.util.Scanner;
public class LeapYear {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		// Create a Scanner object to read input//
		Scanner sc=new Scanner(System.in);

		System.out.println("enter the year: ");

		int year=sc.nextInt();

		//for printing the leap year//

		boolean LeapYear=(year % 4 == 0 && year % 100 != 0)||(year % 400 == 0  );
		if(LeapYear) {
			System.out.println(year+"this is LeapYear");
		}
		else {
			System.out.println(year+"this is not a LeapYear");
		}

		// Close the scanner//
		sc.close();

	}

}
OUTPUT:-
 








3.     Write a program that takes an integer as input and checks if it is positive, negative, or zero.

INPUT:-

package positiveNegativeNumber;
import java.util.Scanner;
public class PositiveNegavtive {

	public static void main(String[] args) {
		//// Create a Scanner object to read input//
		Scanner sc=new Scanner(System.in);

		System.out.println("enter the integer number: ");
		int num=sc.nextInt();

		//for checking positive number//
		if(num>0)
		{
			System.out.println("the number is positive");
		}

		//for checking negative number//
		else if(num<0)
		{
			System.out.println("the number is negative");
		}

		//for checking the number is zero or not
		else {
			System.out.println("the number is zero");
		}

		// Close the scanner//
		sc.close();



	}


}












OUTPUT:-

 

 

 












4.     Write a program that prints numbers from 1 to 10 using a loop.
INPUT:-

package forLoop;

public class ForLoop {

	public static void main(String[] args) {
		// TODO Auto-generated method stub

		//For printing 1 to 10 numbers in loop//

		for(int i=1; i<=10;i++)
		{
			// Print the total//
			System.out.println(i);
		}
	}

}



OUTPUT:-
 










5.     Write a program that takes an integer N as input and calculates the sum of entered numbers.

INPUT:-

package sumOfNumber;

import java.util.Scanner;

public class SumOfNumbers {
	public static void main(String[] args) {
		// Create a Scanner object to read input
		Scanner scanner = new Scanner(System.in);

		// Prompt the user to enter the number of elements
		System.out.print("Enter the number of elements: ");
		int N = scanner.nextInt();

		// Initialize the sum to zero
		int totalSum = 0;

		// Loop to get each number and add it to the sum
		for (int i = 1; i <= N; i++) {
			System.out.print("Enter number " + i + ": ");
			int number = scanner.nextInt();
			totalSum += number;
		}

		// Print the total
		System.out.println("The sum of the entered numbers is: " + totalSum);

		// Close the scanner
		scanner.close();
	}
}








OUTPUT:-


 





















6.     Write a program that takes an integer as input and prints its multiplication table up to 10.
INPUT:-
package multiplicationTable;
import java.util.Scanner;
public class MultiplicationTable {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		int num;

		// Create a Scanner object to read input//
		Scanner sc=new Scanner(System.in);

		//gettig input from user//
		System.out.println("Enter the number: ");
		num=sc.nextInt();

		//for excuting for getting mutiplication table upto 10//
		for(int i=1;i<11;i++) 
			//standard format for priting table in proper manner
			System.out.println(num + "X" + i + " = " + (num * i) );

		// Close the scanner//
		sc.close();

	}


}


OUTPUT:-
 




7.     Write a program that takes a positive integer as input and prints its digits in reverse order.
INPUT:-
package reverseProblem;
import java.util.Scanner;
public class ReverseOrder {

	public static void main(String[] args) {
		// TODO Auto-generated method stub

		// Create a Scanner object to read input//
		Scanner sc=new Scanner(System.in);

		//getting output from user//
		System.out.println("enter the number: ");
		int num=sc.nextInt();

		//checking that number is positive or not//
		if (num<0) {
			System.out.println("the number is not positive");
		}
		//checking that number is negative or not//
		else {
			System.out.println("the number is positive");

			//for reverse the output//
			while (num!=0) {
				int digit=num%10;
				System.out.print(digit);
				num/=10;
			}
			System.out.println();
		}

		//close Scanner//
		sc.close();
	}

}

Output:-
 

8.     Create a class Animal with a method makeSound() that prints "Some generic animal sound". Create another class Dog that extends Animal and overrides the makeSound() method to print "Bark". Write a main method to demonstrate calling the makeSound() method on an Animal reference holding a Dog object.
INPUT:-
// Define the Animal class
class Animal {
	// Method to make a sound
	public void makeSound() {
		System.out.println("Some generic animal sound");
	}
}

// Define the Dog class that extends Animal
class Dog extends Animal {
	// Override the makeSound() method to provide a specific implementation
	public void makeSound() {
		System.out.println("Bark");
	}
}

public class InheritanceOfAnimal {
	public static void main(String[] args) {
		// Create an Animal reference holding a Dog object
		Animal myDog = new Dog();

		// Call the makeSound() method
		myDog.makeSound();  // This will print "Bark"
	}
}


OUTPUT:-
 
